<!-- https://github.com/ros-controls/ros_controllers/tree/kinetic-devel/diff_drive_controller/test -->
<launch>
    <!--arg name="model" default="$(env sambot_MODEL)" doc="model type [sambot, remo]"/-->
    <arg name="name" default="$(env SAMBOT_ID)"/>
    
    <group ns="$(arg name)">
        
    <rosparam command="load" file="$(find sambot_control)/config/sambot_control.yaml"/>
    <rosparam command="load" file="$(find sambot_base)/config/base.yaml"/>
    
    <param name="mobile_base_controller/base_frame_id" value="$(arg name)/controller/chassis" />
    <param name="mobile_base_controller/odom_frame_id" value="$(arg name)/controller/odom" />
    
    <!-- include file="$(find sambot_driver)/launch/lidar_publisher.launch"/ -->
    <node name="sambot_base_controller" pkg="sambot_driver" type="sambot_hw_driver.py" output="screen"></node>
    <node name="rosserial_base_controller" pkg="rosserial_python" type="serial_node.py" respawn="false" output="screen" args="_port:=/dev/ttyACM0 _baud:=115200"/>
    <node name="sambot_imu_publisher" pkg="sambot_driver" type="imu_publisher.py" output="screen"></node>
    
    <!-- Run the sambot_base -->
    <!-- This will create the sambot hardware interface and instantiate a new controller manager with it -->
    <node name="sambot_base" pkg="sambot_base" type="sambot_base" output="screen"/>

    <!-- Load the controllers -->
    <!-- This will use the controller manager that got started inside the difbot_base node -->
    <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false"
        output="screen" args="joint_state_controller
                                            mobile_base_controller"/>
                                            
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="false" output="screen">
        <param name="tf_prefix" value="$(arg name)" />
    </node>

    
    
    </group>          
                                  
</launch>
